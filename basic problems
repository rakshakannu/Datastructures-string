// they have limited value. 256 possible values. a->97, b->98.. A->65, B->66..

String s = "geeksforgeeks"
System.out.println(s.indexof("geeks"));
System.out.println(s.indexof("for"));
System.out.println(s.substring(1,3)); // (beginning index, end index(excl
1. given two strings, check if they are anagram of each other or not
ex- geeks, ekegs are anagrams

// naive solution O[n square]
// two unequal length strings cant be anagram
// better solution using the ascii values of each alphabet - O[n] or O[n+alphabet size]

bool string( string s1, string s2)
if(s1.length!= s2.length)
  return false;
int count[256] = new int[256]; 
for(int i=0; i<s1.length; i++)
  count[s1[i]]++;              // increment
for(int i=0; i<s2.length; i++)
  count[s2[i]]--;               // decrement
for(int i=0; i<256;i++)
  if(count[i]!=0)
    return false;
return true;

2. Given a string, find the leftmost character that repeats

// naive solution using two loops, O[n square]

// efficient solution 
// frequency method

3. Given a string, find the leftmost char that does not repeat
VERY IMPORTANT AND POPULAR INTERVIEW QUESTION

// naive - [n square] using i,j

// better solution - O[n] - travering the string twice

// best solution - O[n] - by traversing only once

4. given a string, find lexicograghic rank of it
// lexicographic rank means when you sort the string and find all the possible permutions and rank them.

// - O[n]
// count lexicographically smaller than given string



